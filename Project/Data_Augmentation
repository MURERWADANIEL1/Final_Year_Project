import os
import random
import shutil
import tensorflow as tf
import pandas as pd
import numpy as np
import librosa
import librosa.display
import matplotlib.pyplot as plt

# Load patient diagnosis information
patient_diagnosis_info = pd.read_csv(r'C:\Users\Jiary\Downloads\archive\Respiratory_Sound_Database\Respiratory_Sound_Database\patient_diagnosis.csv',
    names=['pid', 'disease'])
print(patient_diagnosis_info.head())
output_dir = r'C:\Users\Jiary\Documents\GitHub\ML'

data_dir=r'C:\Users\Jiary\Downloads\archive\Respiratory_Sound_Database\Respiratory_Sound_Database'
audio_dir = os.path.join(data_dir, "audio_and_txt_files")
diagnosis_path = os.path.join(data_dir, "patient_diagnosis.csv")  # Contains patient diagnoses
wav_files = sorted([f for f in os.listdir(audio_dir) if f.endswith(".wav")])
txt_files = sorted([f for f in os.listdir(audio_dir) if f.endswith(".txt")])
print(f"Found {len(wav_files)} audio files and {len(txt_files)} annotation files.")

#dropping asthma with a single case
input_file=patient_diagnosis_info
asthma_rows=input_file[input_file['disease']=='Asthma']
df_filter_asthma=input_file[input_file['disease']!='Asthma']
output_file_path=os.path.join(output_dir,'patient_diagnosis_filtered_data.csv')
df_filter_asthma.to_csv(output_file_path,index=False)
print("Asthma rows dropped")
print("Number of rows dropped: ", len(asthma_rows))
print("Filtered dataset saved to: ", output_dir) 

#dropping audio and tect files for asthma
output_audio_dir = r'C:\Users\Jiary\Documents\GitHub\ML\Filtered_audio_files'
asthma_pids=patient_diagnosis_info[patient_diagnosis_info['disease']=='Asthma']['pid'].tolist()
wav_files = sorted([f for f in os.listdir(audio_dir) if f.endswith(".wav")])
txt_files = sorted([f for f in os.listdir(audio_dir) if f.endswith(".txt")])

def isAsthmaAfile(filename, asthma_pids):
    for pid in asthma_pids:
        if f'_{pid}_' in filename:
            return True
        return False
    for files in wav_files + txt_files:
        if not isAsthmaAfile(file, asthma_pids):
            src_path=os.path.join(audio_dir, file)
            dst_path=os.path.join(output_audio_dir, file)
            shutil.copy(src_path, dst_path)

        else:
            print(f"File {file} is from an asthma patient. Skipping.")
print("Filtered audio files saved to: ", output_audio_dir)

#Get all

#Generate deterministic random data
def deterministic_random(seed):
    SEED = 42
    random.seed(SEED)
    np.random.seed(SEED)
    tf.random.set_seed(SEED)
    tf.config.experimental.enable_op_determinism()


#def Augmented_Data:

